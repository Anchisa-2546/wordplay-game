import streamlit as st
import time
import random

# ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (10 ‡∏Ñ‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î)
word_categories = {
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®": {
        "‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå": ["Thailand", "Japan", "France", "Brazil", "Germany", "Canada", "Australia", "China", "Italy", "India"],
        "‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ": [
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÉ‡∏ï‡πâ", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏î‡∏±‡∏á", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏£‡∏µ‡∏™", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ",
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏î‡∏±‡∏á", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡πÑ‡∏ô‡πÅ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏¥‡∏á‡πÇ‡∏à‡πâ", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡∏ä‡∏°‡∏≤‡∏Æ‡∏≤‡∏•"
        ]
    },
    "‡∏ú‡∏•‡πÑ‡∏°‡πâ": {
        "‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå": ["Apple", "Banana", "Mango", "Orange", "Durian", "Rambutan", "Longan", "Strawberry", "Pineapple", "Watermelon"],
        "‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ": [
            "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡πÅ‡∏î‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏á‡∏≠‡πÜ", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏µ",
            "‡∏£‡∏≤‡∏ä‡∏≤‡∏ú‡∏•‡πÑ‡∏°‡πâ ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÅ‡∏£‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏°‡∏µ‡∏Ç‡∏ô ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÅ‡∏î‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πá‡∏Å ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≤‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°",
            "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ç‡πá‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡πÅ‡∏î‡∏á ‡∏â‡πà‡∏≥‡∏ô‡πâ‡∏≥"
        ]
    },
    "‡∏™‡∏±‡∏ï‡∏ß‡πå": {
        "‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå": ["Tiger", "Elephant", "Rabbit", "Penguin", "Sloth", "Capybara", "Kangaroo", "Hamster", "Giraffe", "Dolphin"],
        "‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ": [
            "‡∏Å‡∏≤‡∏°‡∏π ‡∏ï‡πä‡∏á‡∏á‡∏á", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ö‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÑ‡∏î‡πâ", "‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡πà‡∏á",
            "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ü‡∏±‡∏ô‡πÅ‡∏ó‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πâ‡∏≠‡∏á",
            "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ß‡∏¥‡πà‡∏á‡πÉ‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Ñ‡∏≠‡∏¢‡∏≤‡∏ß‡∏Å‡∏¥‡∏ô‡πÉ‡∏ö‡πÑ‡∏°‡πâ", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏•‡∏π‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏°‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡πà‡∏á"
        ]
    }
}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
if "score" not in st.session_state:
    st.session_state.score = 0
if "time_left" not in st.session_state:
    st.session_state.time_left = 30  
if "game_running" not in st.session_state:
    st.session_state.game_running = False
if "selected_category" not in st.session_state:
    st.session_state.selected_category = "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®"
if "word_to_guess" not in st.session_state:
    st.session_state.word_to_guess = ""
if "hint" not in st.session_state:
    st.session_state.hint = ""
if "start_time" not in st.session_state:
    st.session_state.start_time = None
if "user_answer" not in st.session_state:
    st.session_state.user_answer = ""
if "show_answer" not in st.session_state:
    st.session_state.show_answer = False
if "next_question" not in st.session_state:
    st.session_state.next_question = False  

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà
def select_new_word():
    category = st.session_state.selected_category
    index = random.randint(0, len(word_categories[category]["‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå"]) - 1)
    st.session_state.word_to_guess = word_categories[category]["‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå"][index]
    st.session_state.hint = word_categories[category]["‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ"][index]
    st.session_state.start_time = time.time()
    st.session_state.time_left = 30  
    st.session_state.user_answer = ""
    st.session_state.show_answer = False
    st.session_state.next_question = False  

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
def start_game():
    st.session_state.score = 0
    st.session_state.game_running = True
    st.session_state.next_question = True  

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏Å‡∏°
def reset_game():
    st.session_state.score = 0
    st.session_state.game_running = False
    st.session_state.next_question = False
    st.session_state.word_to_guess = ""
    st.session_state.hint = ""
    st.session_state.time_left = 30
    st.session_state.user_answer = ""

# UI ‡πÄ‡∏Å‡∏°
st.title("üéÆ WordPlay: ‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå")
st.subheader(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {st.session_state.score}")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
st.session_state.selected_category = st.selectbox("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", ["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®", "‡∏ú‡∏•‡πÑ‡∏°‡πâ", "‡∏™‡∏±‡∏ï‡∏ß‡πå"])

col1, col2 = st.columns(2)

with col1:
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°"):
        start_game()

with col2:
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏Å‡∏°"):
        reset_game()

if st.session_state.game_running:
    if st.session_state.next_question:
        if st.button("‚û°Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
            select_new_word()

    if st.session_state.word_to_guess:
        elapsed_time = time.time() - st.session_state.start_time
        st.session_state.time_left = max(0, 30 - int(elapsed_time))

        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        time_display = st.empty()
        time_display.write(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {st.session_state.time_left} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        if st.session_state.time_left <= 0 or st.session_state.show_answer:
            st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠: {st.session_state.word_to_guess}")
            st.session_state.next_question = True  

        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            word_length = len(st.session_state.word_to_guess.replace(" ", ""))
            st.write(f"üí° ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ: {st.session_state.hint}")
            st.write(f"üî¢ ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {word_length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")

            # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            user_input = st.text_input("üî§ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", key="answer_input")

            # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            if st.button("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
                if not user_input.strip():
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏™‡πà‡∏á")
                elif user_input.lower().strip() == st.session_state.word_to_guess.lower().strip():
                    st.session_state.score += 10
                    st.success(f"üéâ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! +10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                else:
                    st.session_state.score -= 10
                    st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î! -10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                
                st.session_state.show_answer = True  
                st.session_state.next_question = True  