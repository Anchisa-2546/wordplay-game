import streamlit as st
import random
import time

# Initialize session state variables
if "player_name" not in st.session_state:
    st.session_state.player_name = ""
if "score" not in st.session_state:
    st.session_state.score = 0
if "total_time" not in st.session_state:
    st.session_state.total_time = 0
if "last_score" not in st.session_state:
    st.session_state.last_score = 0
if "last_time" not in st.session_state:
    st.session_state.last_time = 0
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "incorrect_answers" not in st.session_state:
    st.session_state.incorrect_answers = 0
if "game_over" not in st.session_state:
    st.session_state.game_over = False
if "selected_category" not in st.session_state:
    st.session_state.selected_category = None
if "start_time" not in st.session_state:
    st.session_state.start_time = None
if "leaderboard" not in st.session_state:
    st.session_state.leaderboard = []

# Word categories
word_categories = {
    "üåç ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®": {
        "words": ["Thailand", "Japan", "France", "Brazil", "Germany", "Canada", "Australia", "China", "Italy", "India", "Russia", "Mexico", "Spain", "Egypt", "Sweden"],
        "hints": ["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢", "‡∏°‡∏µ‡∏≠‡∏∞‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏î‡∏±‡∏á", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏£‡∏µ‡∏™", "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ", "‡∏°‡∏µ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏î‡∏±‡∏á", "‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡πÑ‡∏ô‡πÅ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≤", "‡∏°‡∏µ‡∏à‡∏¥‡∏á‡πÇ‡∏à‡πâ", "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡πÄ‡∏¢‡∏≠‡∏∞‡∏™‡∏∏‡∏î", "‡∏°‡∏µ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤", "‡∏°‡∏µ‡∏ó‡∏±‡∏ä‡∏°‡∏≤‡∏Æ‡∏≤‡∏•",
                  "‡∏°‡∏µ‡∏´‡∏°‡∏µ‡∏Ç‡∏≤‡∏ß", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤‡∏Å‡∏•‡∏≤‡∏á", "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏™‡πÄ‡∏õ‡∏ô", "‡∏°‡∏µ‡∏û‡∏µ‡∏£‡∏∞‡∏°‡∏¥‡∏î", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡∏¥‡πÄ‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢"],
        "background": "https://example.com/world_background.jpg"
    },
    "üçé ‡∏ú‡∏•‡πÑ‡∏°‡πâ": {
        "words": ["Apple", "Banana", "Mango", "Orange", "Durian", "Rambutan", "Longan", "Strawberry", "Pineapple", "Watermelon", "Papaya", "Coconut", "Cherry", "Grapes", "Guava"],
        "hints": ["‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡πÅ‡∏î‡∏á", "‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ", "‡∏£‡∏≤‡∏ä‡∏≤‡∏ú‡∏•‡πÑ‡∏°‡πâ", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏î‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πá‡∏Å", "‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏´‡∏ß‡∏≤‡∏ô", "‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ç‡πá‡∏á", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏â‡πà‡∏≥‡∏ô‡πâ‡∏≥",
                  "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏Å‡∏™‡∏µ‡∏™‡πâ‡∏°", "‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß", "‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏µ‡πÅ‡∏î‡∏á", "‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ß‡∏á", "‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏ß"],
        "background": "https://example.com/fruit_background.jpg"
    },
    "üêÖ ‡∏™‡∏±‡∏ï‡∏ß‡πå": {
        "words": ["Tiger", "Elephant", "Rabbit", "Penguin", "Sloth", "Capybara", "Kangaroo", "Hamster", "Giraffe", "Dolphin", "Zebra", "Panda", "Wolf", "Parrot", "Turtle"],
        "hints": ["‡πÄ‡∏™‡∏∑‡∏≠‡πÉ‡∏ô‡∏õ‡πà‡∏≤", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ö‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà", "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ", "‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ü‡∏±‡∏ô‡πÅ‡∏ó‡∏∞‡πÉ‡∏´‡∏ç‡πà", "‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡πâ‡∏≠‡∏á", "‡∏ß‡∏¥‡πà‡∏á‡πÉ‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠", "‡∏Ñ‡∏≠‡∏¢‡∏≤‡∏ß", "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡πà‡∏á",
                  "‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥", "‡∏´‡∏°‡∏µ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤‡∏î‡∏∏‡∏£‡πâ‡∏≤‡∏¢", "‡∏ô‡∏Å‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ", "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ç‡πá‡∏á"],
        "background": "https://example.com/animal_background.jpg"
    },
    "üë©‚Äçüî¨ ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û": {
        "words": ["Doctor", "Engineer", "Teacher", "Artist", "Scientist", "Chef", "Musician", "Writer", "Nurse", "Actor", "Pilot", "Firefighter", "Police", "Judge", "Dancer"],
        "hints": ["‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∞‡∏û‡∏≤‡∏ô", "‡∏™‡∏≠‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û", "‡∏ó‡∏≥‡∏ß‡∏¥‡∏à‡∏±‡∏¢", "‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏ô‡∏ï‡∏£‡∏µ", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", "‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå",
                  "‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô", "‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á", "‡∏à‡∏±‡∏ö‡πÇ‡∏à‡∏£", "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ", "‡πÄ‡∏ï‡πâ‡∏ô‡∏£‡∏≥"],
        "background": "https://example.com/job_background.jpg"
    },
    "‚öΩ ‡∏Å‡∏µ‡∏¨‡∏≤": {
        "words": ["Football", "Basketball", "Tennis", "Baseball", "Cricket", "Rugby", "Hockey", "Golf", "Volleyball", "Badminton", "Swimming", "Cycling", "Skiing", "Boxing", "Chess"],
        "hints": ["‡∏Å‡∏µ‡∏¨‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÉ‡∏´‡∏ç‡πà", "‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏µ‡∏•‡∏π‡∏Å", "‡∏Å‡∏µ‡∏¨‡∏≤‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡∏Å‡∏µ‡∏¨‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏≤‡∏ß", "‡∏Å‡∏µ‡∏¨‡∏≤‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏ï‡∏±‡∏ß", "‡∏Å‡∏µ‡∏¨‡∏≤‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", "‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏µ‡∏•‡∏π‡∏Å‡πÄ‡∏•‡πá‡∏Å", "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°", "‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πâ‡∏Ç‡∏ô‡πÑ‡∏Å‡πà",
                  "‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", "‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô", "‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏ô‡∏´‡∏¥‡∏°‡∏∞", "‡∏ä‡∏Å‡∏°‡∏ß‡∏¢", "‡πÄ‡∏Å‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô"],
        "background": "https://example.com/sport_background.jpg"
    }
}

# UI
st.title("üéÆ WordPlay: ‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå")

# Player name input
st.session_state.player_name = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:", st.session_state.player_name)

st.subheader(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {st.session_state.score} | ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°: {st.session_state.total_time}s")

# Convert last_time to minutes and seconds
last_minutes, last_seconds = divmod(st.session_state.last_time, 60)
st.subheader(f"üí° ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {st.session_state.last_score} | ‡πÄ‡∏ß‡∏•‡∏≤: {int(last_minutes)} ‡∏ô‡∏≤‡∏ó‡∏µ {int(last_seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

category = st.selectbox("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", list(word_categories.keys()))

# Display background
if category:
    st.markdown(f"""
        <style>
            body {{
                background-image: url('{word_categories[category]["background"]}');
                background-size: cover;
            }}
        </style>
        """, unsafe_allow_html=True)

# Start new game
if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"):
    if st.session_state.player_name == "":
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°!")
    else:
        st.session_state.score = 0
        st.session_state.total_time = 0
        st.session_state.current_question = 0
        st.session_state.incorrect_answers = 0
        st.session_state.game_over = False
        st.session_state.start_time = time.time()

if not st.session_state.game_over and category:
    word = word_categories[category]["words"][st.session_state.current_question]
    hint = word_categories[category]["hints"][st.session_state.current_question]
    st.write(f"üí° ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ: {hint} ({len(word)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)")

    # Ensure start_time is not None
    if st.session_state.start_time is not None:
        elapsed_time = time.time() - st.session_state.start_time
        remaining_time = 30 - elapsed_time
        st.write(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {int(remaining_time)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        if remaining_time <= 0:
            st.error("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà.")
            st.session_state.game_over = True
            st.session_state.last_score = st.session_state.score
            st.session_state.last_time = time.time() - st.session_state.start_time
            st.experimental_rerun()

    answer = st.text_input("‚úçÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:")

    if st.button("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
        if answer.lower().strip() == word.lower():
            st.success("‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! +10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
            st.session_state.score += 10
        else:
            st.error(f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠: {word}")
            st.session_state.incorrect_answers += 1

        # Update total time
        st.session_state.total_time += time.time() - st.session_state.start_time
        st.session_state.current_question += 1
        st.session_state.start_time = time.time()  # Reset timer for next question

        # Check if the game is over
        if st.session_state.incorrect_answers >= 3 or st.session_state.current_question >= len(word_categories[category]["words"]):
            st.session_state.game_over = True
            st.session_state.last_score = st.session_state.score
            st.session_state.last_time = st.session_state.total_time

            # Record player data
            st.session_state.leaderboard.append({
                "name": st.session_state.player_name,
                "score": st.session_state.score,
                "time": st.session_state.last_time
            })

            # Sort leaderboard by score and time
            st.session_state.leaderboard.sort(key=lambda x: (-x["score"], x["time"]))

            st.write("üéâ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")

# Display leaderboard
st.write("üèÜ Leaderboard:")
for idx, player in enumerate(st.session_state.leaderboard):
    minutes, seconds = divmod(player["time"], 60)
    st.write(f"{idx + 1}. {player['name']} - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {player['score']}, ‡πÄ‡∏ß‡∏•‡∏≤: {int(minutes)} ‡∏ô‡∏≤‡∏ó‡∏µ {int(seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
